<!DOCTYPE html>
<html>
<head>
	<title>{{ context.terms.get('Dependency graph', 'Dependency graph') }}</title>
	<meta name="generator" content="plasTeX" />
	<meta charset="utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1" />
	<link rel="stylesheet" href="styles/theme-green.css" />
	<link rel="stylesheet" href="styles/dep_graph.css" />
	{% if config.html5['use-mathjax'] %}
	<script type="text/x-mathjax-config">
	{% if config.html5['mathjax-dollars'] %}
		MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}});
	{% else %}
		MathJax.Hub.Config({tex2jax: {inlineMath: [ ['\\(','\\)']]}});
	{% endif %}
	</script>
	<script type="text/javascript" src="{{ config.html5['mathjax-url'] }}">
	</script>
{% endif %}
  <style type="text/css">
		.links line {
			stroke: #aaa;
		}

		.nodes circle {
			pointer-events: all;
			stroke: none;
		}

		circle.active  {
			fill: red;
		}
		
		circle.activehighlight  {
			stroke: red;
			stroke-width: 3px;
		}

		circle.highlight  {
			stroke: black;
			stroke-width: 3px;
		}
  </style>
</head>
<body>
<svg width="960" height="600"></svg>
{%- for thm in graph.nodes() %}
<div class="thm" id="{{ thm.id }}" style="display: none">
  <div class="thm_thmheading">
    <span class="{{ thm.thmName }}_thmcaption">
    {{ thm.caption }}
    </span>
    {% if thm.ref %}
    <span class="{{thm.thmName}}_thmlabel">{{thm.ref}}</span>
    {% endif %}
    {% if thm.title %}
    <span class="{{thm.thmName}}_thmtitle">{{ thm.title }}</span>
    {% endif %}
  </div>
  <div class="thm_thm_content">{{ thm }}</div>
 </div>
{%- endfor -%}
</div>
<script src="http://code.jquery.com/jquery.min.js" type="text/javascript"></script>
<script src="https://d3js.org/d3.v4.min.js"></script>
<script>
var graph = {
  nodes: [
{%- for node in graph.nodes() %}
    {
      id: '{{ node.id }}',
    },
{%- endfor -%}
	],
  links: [
{%- for source, target in graph.edges() %}
    {
      source: '{{ source.id }}',
      target: '{{ target.id }}',
    },
{%- endfor -%}
	]
}




var svg = d3.select("svg"),
    width = +svg.attr("width"),
    height = +svg.attr("height"),
    transform = d3.zoomIdentity;

svg.append("svg:defs").append("svg:marker")
    .attr("id", "triangle")
    .attr("refX", 12)
    .attr("refY", 6)
    .attr("markerWidth", 12)
    .attr("markerHeight", 12)
    .attr("orient", "auto")
    .append("path")
    .attr("d", "M 0 0 12 6 0 12 3 6")
    .style("fill", "black");

svg.append("svg:defs")
	.append("svg:marker")
	.attr("id", "arrow")	
	.attr("refX", 10)
	.attr("refY", 6)
	.attr("markerWidth", 13)
	.attr("markerHeight", 13)
	.attr("orient", "auto")
	.append("svg:path")
	.attr("d", "M2,2 L2,11 L10,6 L2,2");


var simulation = d3.forceSimulation()
    .force("link", d3.forceLink().id(function(d) { return d.id; }))
    .force("charge", d3.forceManyBody().strength(-1000))
    .force("center", d3.forceCenter(width / 2, height / 2));

var link = svg.append("g")
    .attr("class", "links")
    .selectAll("line")
    .data(graph.links)
    .enter().append("line")
		.attr("marker-end", "url(#triangle)");


var node = svg.append("g")
      .attr("class", "nodes")
    .selectAll("circle")
    .data(graph.nodes)
    .enter().append("circle")
    .attr("r", 5)
    .on("mouseover", function(){
			var obj = d3.select(this);
			if (obj.classed("active")) {
  			obj.classed("activehighlight", true);
			} else {
  			obj.classed("highlight", true);
			}
		})
		.on("mouseout", function(d) {
			    d3.select(this).classed("highlight", false);
			    d3.select(this).classed("activehighlight", false);
          } )
    .on('click', function(d,i) {
            // d - datum
            // i - identifier or index
            // this - the `<circle>` that was clicked
           d3.selectAll("circle").classed("active highlight", false); 
           d3.select(this).classed("active activehighlight", true); 
					 $('.thm').hide();
					 $('#' + CSS.escape(d.id)).show();
        })
    .call(d3.drag()
          .on("start", dragstarted)
          .on("drag", dragged)
          .on("end", dragended));

  node.append("title")
      .text(function(d) { return d.id; });

// Zoom
svg.call(d3.zoom()
    .scaleExtent([1 / 2, 8])
    .on("zoom", zoomed));

function zoomed() {
  svg.attr("transform", d3.event.transform);
}

simulation
    .nodes(graph.nodes)
    .on("tick", ticked);

simulation.force("link")
    .links(graph.links);

function ticked() {
    link
        .attr("x1", function(d) { return d.source.x; })
        .attr("y1", function(d) { return d.source.y; })
        .attr("x2", function(d) { return d.target.x; })
        .attr("y2", function(d) { return d.target.y; });

    node
        .attr("cx", function(d) { return d.x; })
        .attr("cy", function(d) { return d.y; });
  }

function dragstarted(d) {
  if (!d3.event.active) simulation.alphaTarget(0.3).restart();
  d.fx = d.x;
  d.fy = d.y;
}

function dragged(d) {
  d.fx = d3.event.x;
  d.fy = d3.event.y;
}

function dragended(d) {
  if (!d3.event.active) simulation.alphaTarget(0);
  d.fx = null;
  d.fy = null;
}

</script>
</body>
</html>

